<?php

require('./fpdf182/fpdf.php');

class XML_PDF extends FPDF
{
    private $supported_tags = array('image','text','roundedrect');
    const PTperMM = 2.835;  // points, 1 mm = 2.83465 points, 1px = 0.75 pt
    const PTperPX = 0.75;   // This is dpi 96, which mean 1 inch is 96 pixel, 1 inch is 72 pts
    // default: 96dpi, a pixel = 0.26458333 mm

    private $angle=0;
    function Rotate($angle, $x=-1, $y=-1){
        if($x==-1)
            $x = $this->x;
        if($y==-1)
            $y = $this->y;
        if($this->angle!=0)
            $this->_out('Q');
        $this->angle=$angle;
        if($angle!=0)
        {
            $angle *= M_PI/180;
            $c = cos($angle);
            $s = sin($angle);
            $cx = $x*$this->k;
            $cy = ($this->h-$y)*$this->k;
            $this->_out(sprintf('q %.5F %.5F %.5F %.5F %.2F %.2F cm 1 0 0 1 %.2F %.2F cm', $c,$s,-$s,$c,$cx,$cy,-$cx,-$cy));
        }
    }

    function RotatedImage($file,$x,$y,$w,$h,$angle)
    {
        $this->Rotate($angle,$x,$y);
        $this->Image($file,$x,$y,$w,$h);
        $this->Rotate(0);
    }

    function _endpage()
    {
        if($this->angle!=0)
        {
            $this->angle = 0;
            $this->_out('Q');
        }
        parent::_endpage(); // TODO: Change the autogenerated stub
    }

    // return Points
    public static function MMtoPT($mm)
    {
        return $mm * PDF::PTperMM;
    }

    public static function PTtoMM($pt)
    {
        return $pt / PDF::PTperMM;
    }

    // return Points
    public static function PXtoPT($px)
    {
        return $px * PDF::PTperPX;
    }

    public static function PXtoMM($px){
        return self::PXtoPT($px) / self::PTperMM;
    }

    // Draw a Rounded Rect
    public function RoundedRect($x, $y, $w, $h, $r, $style = '')
    {
        $k = $this->k;
        $hp = $this->h;
        if($style=='F')
            $op='f';
        elseif($style=='FD' || $style=='DF')
            $op='B';
        else
            $op='S';
        $MyArc = 4/3 * (sqrt(2) - 1);
        $this->_out(sprintf('%.2F %.2F m',($x+$r)*$k,($hp-$y)*$k ));
        $xc = $x+$w-$r ;
        $yc = $y+$r;
        $this->_out(sprintf('%.2F %.2F l', $xc*$k,($hp-$y)*$k ));

        $this->_Arc($xc + $r*$MyArc, $yc - $r, $xc + $r, $yc - $r*$MyArc, $xc + $r, $yc);
        $xc = $x+$w-$r ;
        $yc = $y+$h-$r;
        $this->_out(sprintf('%.2F %.2F l',($x+$w)*$k,($hp-$yc)*$k));
        $this->_Arc($xc + $r, $yc + $r*$MyArc, $xc + $r*$MyArc, $yc + $r, $xc, $yc + $r);
        $xc = $x+$r ;
        $yc = $y+$h-$r;
        $this->_out(sprintf('%.2F %.2F l',$xc*$k,($hp-($y+$h))*$k));
        $this->_Arc($xc - $r*$MyArc, $yc + $r, $xc - $r, $yc + $r*$MyArc, $xc - $r, $yc);
        $xc = $x+$r ;
        $yc = $y+$r;
        $this->_out(sprintf('%.2F %.2F l',($x)*$k,($hp-$yc)*$k ));
        $this->_Arc($xc - $r, $yc - $r*$MyArc, $xc - $r*$MyArc, $yc - $r, $xc, $yc - $r);
        $this->_out($op);
    }

    // for drawing a rounded rect
    private function _Arc($x1, $y1, $x2, $y2, $x3, $y3)
    {
        $h = $this->h;
        $this->_out(sprintf('%.2F %.2F %.2F %.2F %.2F %.2F c ', $x1*$this->k, ($h-$y1)*$this->k,
            $x2*$this->k, ($h-$y2)*$this->k, $x3*$this->k, ($h-$y3)*$this->k));
    }

    public function setCenteredText($string, $absY = -1, $margin_top = -1)
    {
        $c_height = $this->FontSize*1.2;
        $c_width = 0;
        $this->SetX(0);
        if($absY !== -1){
            $this->setY($absY);
        }
        else{
            if($margin_top !== -1) {
                $this->setY($this->GetY() + $margin_top);
            }
        }
        $this->Cell($c_width,$c_height,$string,0,1,'C');
    }


    private function RoundedRectwithText($x,$y,$w,$h, $content)
    {
        $this->RoundedRect($x, $y, $w, $h, 2, 'F');

        $this->SetXY($x, $y+$this->FontSize*0.7);
        $this->MultiCell($w, $this->FontSize*1.4, $content, 0, 'C');
    }

    // page two table
    private function PagetwoTable($tbwidth, $tbheight)
    {
        // Colors, line width and bold font
        $this->SetFillColor(214,222,237);
        $this->SetTextColor(51);
        $this->SetDrawColor(51);
        //$pdf->SetLineWidth(2);
        $this->SetFont('','B');

        $w = array(0.4*$tbwidth, 0.6*$tbwidth);
        $this->Cell($w[0],$tbheight/6,'  ASSET ALLOCATION: ',0,1,'L',true);
        $y = $this->GetY();

        // Header
        $header=['       Australian Shares',
            '       International Shares',
            '       Cash',
            '       Property',
            '       Bonds, term deposits'];
        $data=['40%','0%','20%','40%','0%'];
        $this->SetFont('','');
        $this->setX($this->w / 9);
        for($i=0;$i<5;$i++) {
            $this->Cell($w[0], $tbheight/6, $header[$i], 0, 0, 'L', true);
            $this->Cell($w[1], $tbheight/6, $data[$i], 0, 1, 'C', false);
            $this->setX($this->w/9);
        }
        $this->setXY($this->w/9, $y);
        for($i=0;$i<4;$i++) {
            $this->setX($this->w / 9 + $tbwidth / 16);
            $this->Cell($tbwidth * 14 / 16, $tbheight/6, '', 'B', 1);
        }
    }

    public function AddCustomizedPage($value)
    {
        //var_dump($value);
        $direction = '';
        $size = '';
        if(isset($value['direction']) && gettype($value['direction']) === 'string')
        {
            // if the attribute is set, but no value, it is an empty array.
            // otherwise, it is a string.
            $direction = $value['direction'];
        }
        if(isset($value['size']) && gettype($value['size']) === 'string')
        {
            $size = $value['size'];
        }
        if($direction == '' && $size == ''){
            $this->AddPage();
        }
        else{
            $this->AddPage($direction,$size);
        }

        foreach ($value as $k => $v){
            if(in_array($k, $this->supported_tags)){
                switch ($k){
                    case 'image':
                        if(isset($value[$k])){
                            $this->RenderImage($value[$k]);
                        }
                        break;
                    case 'text':
                        if(isset($value[$k])){
                            $this->RenderText($value[$k]);
                        }
                        break;
                    case 'roundedrect':
                        if(isset($value[$k])){
                            $this->RenderRoundedRect($value[$k]);
                        }
                        break;
                    default:
                        return;
                }
            }
        }
    }

    private function RenderRoundedRect($data){
        if(!isset($data['x']))
        { // either one text without string attribute
            //// or more than two texts
            //var_dump($data);
            foreach ($data as $value){
                if(isset($value['x'])){
                    // more than two texts
                    $this->AddRoundedRect($value);
                }
            }
        }
        else {
            $this->AddRoundedRect($data);
        }
    }

    private function AddRoundedRect($data){
        $x = (float)$data['x'];
        $y = (float)$data['y'];
        $w = (int)$data['w'];
        $h = (int)$data['h'];
        $r = (int)$data['r'];
        if(isset($data['fillcolor'])) {
            $color = array_map('intval', explode(',', $data['fillcolor']));
            $this->SetFillColor($color[0], $color[1], $color[2]);
        }
        if(isset($data['bordercolor'])) {
            $color = array_map('intval', explode(',', $data['bordercolor']));
            $this->SetDrawColor($color[0], $color[1], $color[2]);
        }
        $this->RoundedRect($x, $y, $w,$h,$r, $data['style']);

    }

    private function RenderText($data){
        if(!isset($data['string']))
        { // either one text without string attribute
            //// or more than two texts
            //var_dump($data);
            foreach ($data as $text){
                if(isset($text['string'])){
                    // more than two texts
                    $this->AddText($text);
                }
            }
        }
        else {
                $this->AddText($data);
        }
    }

    private function AddText($text){
        $x = (float)$text['x'];
        $y = (float)$text['y'];

        if(isset($text['color'])) {
            $color = array_map('intval', explode(',', $text['color']));
            $this->SetTextColor($color[0], $color[1], $color[2]);
        }
        $fill = false;
        if(isset($text['bgcolor'])){
            $color = array_map('intval',explode(',',$text['bgcolor']));
            $this->SetFillColor($color[0],$color[1],$color[2]);
            $fill = true;
        }
        $this->SetFont('Arial','',intval($text['fontsize']));
        $this->SetXY($x, $y);
        $width = $this->GetStringWidth($text['string']) + 2;
        $this->Cell($width, $this->FontSize*1.4, $text['string'], 0, 0, 'L', $fill);
    }

    private function RenderImage($data){
        if(!isset($data['path']))
        { // either one image without path attribute
            //// or more than two images
            foreach ($data as $image){
                if(isset($image['path']) && $this->CheckImageTag($image))
                    // more than two images
                    $this->AddImage($image);
            }
        }
        else {
            if($this->CheckImageTag($data))
                $this->AddImage($data);
        }
    }

    //Input: an array with path, x, y, w, h
    //Their value can not be empty;
    // x, y can not be less than 0;
    private function CheckImageTag($image){
        foreach ($image as $value){
            if(gettype($value) === 'array')  // empty value : empty array
                return false;
        }
        $x = round((float)$image['x'],2);
        $y = round((float)$image['y'],2);
        if($x < 0 || $y < 0)
            return false;
        return true;
    }

    //Input: an array with path, x, y, w, h
    //path must exist; if no h, the height is calculated by width
    private function AddImage($image)
    {
        if(file_exists($image['path']))
        {
            $x = (float)$image['x'];
            $y = (float)$image['y'];
            $w = (int)$image['w'];
            $h = isset($image['h'])? (int)$image['h'] : 0;
            $this->Image($image['path'], $x, $y,$w,$h);
            //var_dump($x,$y,$w,$h,$image['path']);
        }
    }

}


?>
